#!/bin/python3

from sys import argv
from re import search
from os.path import exists

def find_function_end(lines, start_index):
    """Finds the end of a C function"""

    # Counter for matching braces
    # L brace '{' increments the count
    # R brace '}' decrements the count
    brace_count = 0

    # Check if the function has a brace at the end
    # eg. void my_func() {
    brace_count += lines[start_index].count('{')

    # Move onto the next line as we've already checked if the function
    # definition start has a '{' character
    i = start_index + 1
    while (i < len(lines)):
        brace_count += lines[i].count('{')
        brace_count -= lines[i].count('}')

        if brace_count == 0:
            return i

        i += 1


def dump_function_definitions(file_name, functions):
    """Creates empty definitions for all functions in a header file"""
    with open(file_name, "w") as f:
        # Add the header include to the source file
        f.write(f"#include \"{argv[1]}\"\n\n")

        for i in functions:
            f.write(i + "\n{\n\n}\n\n")


def add_function_definitions(file_name, functions):
    """Adds function definitions to already existing C file"""
    with open(file_name, "r+") as f:
        # Get the contents of the file as a string so we can quickly
        # check if the function is already defined
        str_contents = f.read()

        # Move the file pointer back to the beginning of the file as
        # read() leaves it at the end
        f.seek(0)

        # Read in the file line by line so we can add any new function
        # definitions
        lines = f.readlines()

        for i in range(len(functions)):
            if functions[i] in str_contents:
                continue
            else:
                for j in range(len(lines)):

                    if lines[j] == '\n' or lines[j] == '{' or lines[j] == '}':
                        continue

                    if functions[i - 1] in lines[j]:
                        func_end_index = find_function_end(lines, j)

                        lines.insert(func_end_index + 1, "\n")
                        lines.insert(func_end_index + 2, functions[i] + "\n")
                        lines.insert(func_end_index + 3, "{\n")
                        lines.insert(func_end_index + 4, "\n")
                        lines.insert(func_end_index + 5, "}\n")
                        j = func_end_index + 5

                f.seek(0)
                for line in lines:
                    f.write(line)


def main():

    if len(argv) < 2:
        print("Expected file")
        exit(1)

    functions = []
    c_file = (argv[1][:-1] + 'c')


    with open(argv[1]) as f:
        contents = f.readlines()

        for i in contents:
            # Skip blank lines
            if (i == '\n'):
                continue

            # See if the current line contains a function declaration
            match = search("(struct )?\w+ \w+\((.+)?\)", i)

            if match is None:
                continue
            else:
                functions.append(match.group())


        if not functions:
            print(f"No functions found in supplied file {argv[1]}")
            exit(0)


        if not exists(c_file):
            # If the file doesn't exist it means we can just dump all
            # function declarations into it and then exit this script
            dump_function_definitions(c_file, functions)
        else:
            # If the file already exists then we need to scan through
            # the file and see where the new (if any) function definitions
            # should go
            add_function_definitions(c_file, functions)


if __name__ == '__main__':
    main()
