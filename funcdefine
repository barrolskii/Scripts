#!/bin/python3

from sys import argv
from re import findall,finditer,search
from os.path import exists

def find_member_functions(src: str):
    """
        Gets member functions from a C++ class or struct
        Returns a list of class functions and the source
        code trimmed of those classes
    """

    member_functions = []

    while (obj := search("(class|struct) \w+( |\s)?{( |\s)?(.+\s)+( |\s)?};", src)) is not None:
        src = src.replace(obj.group(), "")

        class_name = search("(class|struct) \w+", obj.group()).group().split(' ')[1]

        # Check if the class/struct has function declarations
        members = finditer("\w+ \w+\((.+)?\);", obj.group())

        for j in members:
            str = j.group()

            # Find the start of the function name
            pos = str.find(' ')
            member_functions.append(str[:pos] + " " + class_name + "::" + str[pos + 1:-1])


    return member_functions, src


def find_functions(source):
    """Gets function declarations from a C/C++ header file"""

    functions = []
    matches = finditer("(struct )?\w+ \w+\((.+)?\)", source)

    for i in matches:
        functions.append(i.group())


    return functions


def dump_function_definitions(file_name, member_functions, functions):
    """Creates empty definitions for all functions in a header file"""

    header = file_name[:-1] + 'h'

    file_source = f"#include \"{header}\"\n\n"

    for i in member_functions:
        file_source = f"{file_source}{i}\n{{\n\n}}\n\n"

    for i in functions:
        file_source = f"{file_source}{i}\n{{\n\n}}\n\n"

    print(file_source)

    with open(file_name, "w") as f:
       f.write(file_source)


def find_function_end(src, func):
    """Finds the end of a function definition"""


    src_len = len(src)

    # Find the position of the last function that this one is behind
    func_start = src.find(func)
    body_start = 0 # Start of function body
    counter    = 0 # Counter to keep track of the matches of '{' and '}' characters
    func_end   = 0


    # Look for the start of the function body
    for x in range(func_start, src_len):
        if src[x] == '{':
            body_start = x
            break


    # Now look for the end of the function body
    for x in range(body_start, src_len):
        if src[x] == '{':
            counter += 1

        if src[x] == '}':
            counter -= 1

        if counter == 0:
            func_end = x
            break

    return func_end


def add_functions(src, funcs):
    """Adds function definitions to source file"""

    for i in range(len(funcs)):
        if funcs[i] in src:
            continue
        else:
            if i == 0:
                if len(funcs) < 2:
                    include_index = 0

                    # Find the last #include preprocessor
                    last = findall("#include .+", src)[-1]
                    last_pos = src.find(last) + len(last)

                    src = src[:last_pos] + "\n\n" + funcs[i] + "\n{\n\n}" + src[last_pos:]
                else:
                    start = src.find(funcs[i + 1])
                    src = src[:start] + funcs[i] + "\n{\n\n}\n\n" + src[start:]
            else:
                func_end = find_function_end(src, funcs[i - 1])
                src = src[:func_end + 1] + "\n\n" + funcs[i] + "\n{\n\n" + src[func_end:]


    return src


def add_function_definitions(file_name, member_functions, functions):
    """Adds function definitions to already existing C file"""

    with open(file_name, "r+") as f:
        src = f.read()

        src = add_functions(src, member_functions)
        src = add_functions(src, functions)

        # Move the file pointer back to the beginning
        # so we can write the new file contents
        f.seek(0)
        f.write(src)


def main():

    if len(argv) < 2:
        print("Expected file")
        exit(1)

    header_file  = argv[1]
    c_file       = (argv[1][:-1] + 'c')

    with open(header_file) as hf:
        contents = hf.read();

        member_functions, contents = find_member_functions(contents)
        functions         = find_functions(contents)


        if not functions and not member_functions:
            print(f"No functions found in supplied file {header_file}")
            exit(0)

        if not exists(c_file):
            # If the file doesn't exist it means we can just dump all
            # function declarations into it and then exit this script
            dump_function_definitions(c_file, member_functions, functions)
        else:
            add_function_definitions(c_file, member_functions, functions)


if __name__ == '__main__':
    main()
