#!/bin/python

import sys
import re

# TODO: Support other languages. Also read these in from a file
keywords = [
    "auto",
    "char",
    "const",
    "double",
    "enum",
    "extern",
    "float",
    "int",
    "long",
    "register",
    "short",
    "signed",
    "static",
    "struct",
    "typedef",
    "union",
    "unsigned",
    "void",
    "volatile",
]

statements = [
    "break",
    "case",
    "continue",
    "default",
    "do",
    "else",
    "for",
    "goto",
    "if",
    "return",
    "sizeof",
    "switch",
    "while",
]

# Boolean to keep check if we are in a code tag to format
b_in_code_tag = False

def format_comment(line):
    comment = re.findall("\\/\\/.+", line)
    if len(comment) > 0:
        line = line.replace(comment[0], '<span class="blue">'+comment[0]+'</span>')

    comment = re.findall("\\/\\*.+\\*\\/", line)
    if len(comment) > 0:
        line = line.replace(comment[0], '<span class="blue">'+comment[0]+'</span>')

    return line

def format_multiline_comment(line):

    if re.search("\\/\\*$", line):
        line = line.replace('/*', '<span class="blue">/*')

    if re.search("\\*\\/$", line):
        line = line.replace('*/', '*/</span>')

    return line


def format_numbers(line):
    nums = re.findall("\\b[-+]?[\\d.]+(?:[eE][-+]?\\d+)?[f]?\\b", line)
    for num in nums:
        line = line.replace(num, '<span class="red">'+num+'</span>')

    return line

def format_string(line):
    strings = re.findall("[\"'].+[\"']", line)
    for string in strings:
        line = line.replace(string, '<span class=red>'+string+'</span>')
    return line

def format_keywords(line):
    global keywords

    for word in keywords:
        if re.search("\\b"+word+"\\b", line):
            line = line.replace(word, '<span class="green">'+word+'</span>')

    return line

def format_statements(line):
    global statements

    for word in statements:
        if re.search("\\b"+word+"\\b", line):
            line = line.replace(word, '<span class="yellow">'+word+'</span>')

    return line

def format_includes(line):
    if re.search("#include", line):
        line = line.replace("#include", '<span class="purple">'+"#include"+'</span>')

    return line

def format_macros(line):
    pre_proc = re.findall("#define\\s\\w+", line)
    if len(pre_proc) > 0:
        line = line.replace(pre_proc[0], '<span class="purple">'+pre_proc[0]+'</span>')

    return line

def main():

    if len(sys.argv) == 1:
        print("Please supply a file to format")
        exit()

    # TODO: Add support for more than one file
    if len(sys.argv) > 2:
        print("Only one file can be formatted at a time")
        exit()

    with open(sys.argv[1], 'r+') as f:
        file_source = f.read().splitlines()

        global b_in_code_tag

        # Loop through each line of the file
        for line in range(len(file_source)):

            if "<code" in file_source[line]:
                b_in_code_tag = True


            if b_in_code_tag:
                file_source[line] = format_string(file_source[line])
                file_source[line] = format_numbers(file_source[line])
                file_source[line] = format_keywords(file_source[line])
                file_source[line] = format_statements(file_source[line])
                file_source[line] = format_includes(file_source[line])
                file_source[line] = format_macros(file_source[line])
                file_source[line] = format_comment(file_source[line])
                file_source[line] = format_multiline_comment(file_source[line])

            if "</code>" in file_source[line]:
                b_in_code_tag = False

        f.seek(0)
        f.write('\n'.join(file_source))
        f.close()

main()
